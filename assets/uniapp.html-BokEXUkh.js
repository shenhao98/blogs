import{_ as s,c as a,b as p,o as e}from"./app-DbN4NjLd.js";const t={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h2 id="判断应用是否连接到服务器" tabindex="-1"><a class="header-anchor" href="#判断应用是否连接到服务器"><span>判断应用是否连接到服务器</span></a></h2><p>使用<code>uni_modules</code>插件</p><div class="language-kotlin line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="kt" style="--vp-collapsed-lines:15;"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">package</span> uts<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>testIp</span>
<span class="line"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader</span>
<span class="line"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader</span>
<span class="line"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit</span>
<span class="line"><span class="token keyword">object</span> NativeFile <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">isIpReachable</span><span class="token punctuation">(</span>ip<span class="token operator">:</span> String<span class="token punctuation">,</span> callback<span class="token operator">:</span> <span class="token punctuation">(</span>code<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Thread <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">val</span> process <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;ping&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;-c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 等待命令执行完成，并获取退出码</span></span>
<span class="line">      <span class="token keyword">val</span> isCompleted  <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>isCompleted<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> exitCode <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">exitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>exitCode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">callback</span><span class="token punctuation">(</span>isCompleted<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="canvas-不生效" tabindex="-1"><a class="header-anchor" href="#canvas-不生效"><span>canvas 不生效</span></a></h2><p>使用 setup 函数时,在封装的组件中需要在<code>createCanvasContext()</code>传入<code>getCurrentInstance()</code>代替 this</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">drawContent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">const</span> ctx <span class="token operator">=</span> uni<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">&#39;myCanvas&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/front/uniapp.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1758079456000,"contributors":[{"name":"沈浩","username":"","email":"1204317466@qq.com","commits":4}],"changelog":[{"hash":"28208af82bd1bca412c2beb01d1d8e375f160b05","time":1758079456000,"email":"1204317466@qq.com","author":"沈浩","message":"docs(front): 补充 uniapp 开发文档"},{"hash":"d81402ab605ff5f00b452cefb866bc5428c5e7f2","time":1756276745000,"email":"1204317466@qq.com","author":"沈浩","message":"docs: 重构导航栏并优化内容结构"},{"hash":"4ad109629253583054532d81fea28d6b6eedb232","time":1756262277000,"email":"1204317466@qq.com","author":"沈浩","message":"docs: 更新网站配置和文档内容"},{"hash":"31436ca34dfc6b1e1382cadc0262aa38ee27366a","time":1754460821000,"email":"1204317466@qq.com","author":"沈浩","message":"feat(docs): 优化文档样式和内容"}]},"filePathRelative":"front/uniapp.md"}');export{i as comp,u as data};
